// :buildSrc
buildscript {
    ext {
        github_handle = "syslogic"
        plugin_display_name = "AppGallery Connect Publishing Plugin"
        plugin_description = "It uploads Android APK/ABB artifacts with AppGallery Connect Publishing API."
        plugin_identifier = "agconnect-publishing-gradle-plugin"
        plugin_class = "io.syslogic.agconnect.PublishingPlugin"
        plugin_id = "io.syslogic.agconnect.publishing"
        plugin_version = libs.versions.plugin.version.get()
    }
}

plugins {
    alias(libs.plugins.maven.publish)
    alias(libs.plugins.gradle.plugin)
    alias(libs.plugins.gradle.publish)
}

dependencies {

    compileOnly gradleApi()
    //noinspection DependencyNotationArgument
    implementation libs.android.gradle
    //noinspection DependencyNotationArgument
    implementation libs.annotations
    //noinspection DependencyNotationArgument
    implementation libs.bundles.http.components

    testImplementation libs.junit
    //noinspection DependencyNotationArgument
    testImplementation libs.annotations
    testImplementation gradleTestKit()
    testImplementation(project)
}

gradlePlugin {
    plugins {
        PublishingPlugin {
            id = "${plugin_id}"
            displayName = "${plugin_display_name}"
            description = "${plugin_description}"
            implementationClass = "${plugin_class}"
        }
    }
}

tasks.withType(Jar).configureEach {
    archiveBaseName.set(plugin_identifier)
    archiveVersion.set("${plugin_version}")
}

tasks.withType(Test).configureEach {
    useJUnitPlatform()
}

tasks.register("javadocs", Javadoc) {
    title = "${plugin_display_name} ${plugin_version} API"
    source = java.sourceSets.main.java.srcDirs
    destinationDir = project.file("/build/outputs/javadoc")
    classpath = files(new File(System.getProperty("java.home") + File.separator + "lib" + File.separator + "rt.jar"))
    classpath += configurations.implementation
    options.links "https://docs.oracle.com/en/java/javase/17/docs/api/"
    options.linkSource true
    options.author true
    failOnError false
}

tasks.register("javadocJar", Jar) {
    dependsOn javadoc
    archiveClassifier.set("javadoc")
    from javadoc.destinationDir
}

tasks.register("sourcesJar", Jar) {
    from java.sourceSets.main.java.srcDirs
    archiveClassifier.set("sources")
}

group = "io.syslogic"
version = "${plugin_version}"
artifacts {
    archives javadocJar
    archives sourcesJar
}

afterEvaluate {
    publishing {

        publications {
            release(MavenPublication) {
                groupId = group
                artifactId = "${plugin_identifier}"
                from components.getByName("java")
                version = "${plugin_version}"
                pom {
                    name = "${plugin_display_name}"
                    description = "${plugin_description}"
                    url = "https://github.com/${github_handle}/${plugin_identifier}"
                    scm {
                        connection = "scm:git:git://github.com/${github_handle}/${plugin_identifier}.git"
                        developerConnection = "scm:git:ssh://github.com/${github_handle}/${plugin_identifier}.git"
                        url = "https://github.com/${github_handle}/${plugin_identifier}/"
                    }
                }
            }
        }

        repositories {
            // https://support.atlassian.com/bitbucket-cloud/docs/variables-and-secrets/
            if (System.getenv("BITBUCKET_BUILD_NUMBER") != null) {
                maven {
                    url = System.getenv("BITBUCKET_MAVEN_REPO")
                    credentials {
                        username = System.getenv("BITBUCKET_CLIENT_ID")
                        password = System.getenv("BITBUCKET_CLIENT_SECRET")
                    }
                }
            }
        }
    }
}
